[tox]
requires =
    tox>=4
    build
env_list = lint, coverage-ci, py{37,38,39,310,311}, test
setenv = VIRTUALENV_DISCOVERY=pyenv

[gh-actions]
python =
    3.7: py37
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311

[testenv]
description = run unit tests
deps = -rrequirements_test.txt
commands =
    {envpython} --version
    {envpython} -m pytest tests

[testenv:test]
description = run tests
deps =
    {[testenv]deps}
commands =
    {envpython} -m pytest {posargs}

[testenv:package]
description = Package the code using pex
deps =
    pex
    build
commands =
    {envpython} --version
    {envpython} -m build
    pex . -m dql:main -o build/dql

[testenv:lint]
description = Run linting using various linting tools. Typechecking using mypy.
ignore_errors = true
deps = -rrequirements_dev.txt
commands =
    {envpython} --version
    pip list -l
    mypy dql tests bin/install.py
    isort --skip snapshots --check dql tests bin/install.py
    black --exclude=snapshots --check dql tests bin/install.py
    pylint --rcfile=.pylintrc dql tests bin/install.py

[testenv:format]
description = Format the code using isort and black.
skip_install = true
deps =
    isort
    black==24.4.1
commands =
    {envpython} --version
    isort --skip snapshots --atomic dql tests bin/install.py
    black --exclude=snapshots dql tests bin/install.py

[testenv:coverage-ci]
description = Run coverage as it would run in ci.
deps =
    {[testenv]deps}
commands =
    {envpython} --version
    pytest --cov=dql --cov-report=html --cov-branch

[testenv:coverage]
description = Run coverage with all bells and whistles.
deps =
    {[testenv]deps}
commands =
    {envpython} --version
    pytest --cov=dql --cov-report=html --cov-branch

[coverage:html]
directory = coverage_html
